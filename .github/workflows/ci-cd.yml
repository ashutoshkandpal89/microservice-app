name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  # Test jobs
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password123
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Create test environment file
      run: |
        cd backend
        cat > .env.test << EOF
        NODE_ENV=test
        PORT=3000
        MONGODB_URI=mongodb://admin:password123@localhost:27017/microservice_test?authSource=admin
        JWT_SECRET=test-secret
        CORS_ORIGIN=http://localhost:3001
        RATE_LIMIT_WINDOW_MS=900000
        RATE_LIMIT_MAX_REQUESTS=1000
        EOF

    - name: Wait for MongoDB
      run: |
        timeout 60s bash -c 'until mongosh mongodb://admin:password123@localhost:27017/admin --eval "db.adminCommand(\"ping\")"; do sleep 2; done'

    - name: Run backend tests
      run: |
        cd backend
        npm test
      env:
        NODE_ENV: test

    - name: Run backend linting
      run: |
        cd backend
        npm run lint || echo "Linting not configured, skipping..."

  test-frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
      env:
        CI: true

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./frontend/coverage
        flags: frontend
        fail_ci_if_error: false

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and push Docker images
  build-and-push:
    needs: [test-backend, test-frontend, security-scan]
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Integration tests
  integration-tests:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Start services
      run: |
        # Create a test docker-compose file
        cat > docker-compose.test.yml << EOF
        version: '3.8'
        services:
          mongodb:
            image: mongo:7.0
            environment:
              MONGO_INITDB_ROOT_USERNAME: admin
              MONGO_INITDB_ROOT_PASSWORD: password123
              MONGO_INITDB_DATABASE: microservice_db
            ports:
              - "27017:27017"
            
          backend:
            build: ./backend
            environment:
              NODE_ENV: test
              PORT: 3000
              MONGODB_URI: mongodb://admin:password123@mongodb:27017/microservice_test?authSource=admin
              JWT_SECRET: test-secret
              CORS_ORIGIN: http://localhost:3001
            ports:
              - "3000:3000"
            depends_on:
              - mongodb
              
          frontend:
            build: ./frontend
            environment:
              REACT_APP_API_URL: http://localhost:3000
            ports:
              - "3001:8080"
            depends_on:
              - backend
        EOF
        
        docker-compose -f docker-compose.test.yml up -d
        sleep 60  # Wait for services to be ready

    - name: Run integration tests
      run: |
        # Test backend health
        curl -f http://localhost:3000/health || exit 1
        
        # Test frontend availability
        curl -f http://localhost:3001 || exit 1
        
        # Test API endpoints
        curl -f http://localhost:3000/api/users || exit 1
        
        echo "All integration tests passed!"

    - name: Cleanup
      if: always()
      run: docker-compose -f docker-compose.test.yml down -v

  # Deployment to staging (only on main branch)
  deploy-staging:
    needs: integration-tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: staging
      url: https://staging.your-domain.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # This could be:
        # - Deploy to AWS ECS/Fargate
        # - Deploy to Kubernetes
        # - Deploy to Heroku
        # - Deploy to Digital Ocean
        # - Update docker-compose on staging server
        
        echo "Staging deployment completed!"

    - name: Run smoke tests on staging
      run: |
        echo "Running smoke tests on staging..."
        # Add smoke tests for staging environment
        # curl -f https://staging-api.your-domain.com/health
        echo "Smoke tests passed!"

  # Deployment to production (manual approval required)
  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://your-domain.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        echo "Production deployment completed!"

    - name: Run smoke tests on production
      run: |
        echo "Running smoke tests on production..."
        # Add smoke tests for production environment
        echo "Smoke tests passed!"

    - name: Notify deployment success
      if: success()
      run: |
        echo "🎉 Production deployment successful!"
        # Add notifications (Slack, email, etc.)

    - name: Notify deployment failure
      if: failure()
      run: |
        echo "❌ Production deployment failed!"
        # Add failure notifications
