apiVersion: apps/v1
kind: Deployment
metadata:
  name: microservice-backend
  labels:
    app: microservice-backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: microservice-backend
  template:
    metadata:
      labels:
        app: microservice-backend
    spec:
      containers:
      - name: backend
        image: ghcr.io/YOUR_USERNAME/microservice/backend:latest
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: CORS_ORIGIN
          value: "https://your-domain.com"
        - name: MONGODB_URI
          valueFrom:
            secretKeyRef:
              name: microservice-secrets
              key: mongodb-uri
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: microservice-secrets
              key: jwt-secret
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: microservice-frontend
  labels:
    app: microservice-frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: microservice-frontend
  template:
    metadata:
      labels:
        app: microservice-frontend
    spec:
      containers:
      - name: frontend
        image: ghcr.io/YOUR_USERNAME/microservice/frontend:latest
        ports:
        - containerPort: 8080
        env:
        - name: REACT_APP_API_URL
          value: "https://api.your-domain.com"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
---
apiVersion: v1
kind: Service
metadata:
  name: microservice-backend-service
spec:
  selector:
    app: microservice-backend
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: microservice-frontend-service
spec:
  selector:
    app: microservice-frontend
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: microservice-ingress
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
  - hosts:
    - api.your-domain.com
    - your-domain.com
    secretName: microservice-tls
  rules:
  - host: api.your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: microservice-backend-service
            port:
              number: 3000
  - host: your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: microservice-frontend-service
            port:
              number: 8080
---
apiVersion: v1
kind: Secret
metadata:
  name: microservice-secrets
type: Opaque
data:
  # Base64 encoded secrets
  # mongodb-uri: <base64-encoded-mongodb-uri>
  # jwt-secret: <base64-encoded-jwt-secret>
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: microservice-backend-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: microservice-backend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
